
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package javacup;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaCUPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaCUPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaCUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaCUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\012\003\000\002\014\002\000\002\015\002" +
    "\000\002\012\007\000\002\016\002\000\002\017\002\000" +
    "\002\012\007\000\002\020\002\000\002\003\005\000\002" +
    "\021\002\000\002\004\005\000\002\022\002\000\002\004" +
    "\005\000\002\013\007\000\002\013\006\000\002\023\002" +
    "\000\002\005\005\000\002\010\005\000\002\010\003\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\024\002\000\002\006\006\000\002\025\002\000\002\006" +
    "\006\000\002\026\002\000\002\006\006\000\002\027\002" +
    "\000\002\011\006\000\002\030\002\000\002\011\006\000" +
    "\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\004\006\001\002\000\004\002\075\001" +
    "\002\000\004\005\030\001\002\000\010\025\ufff7\026\ufff7" +
    "\031\ufff7\001\002\000\010\025\012\026\011\031\010\001" +
    "\002\000\004\025\ufffa\001\002\000\004\005\uffeb\001\002" +
    "\000\030\005\ufffe\006\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffd\030\ufffe\001\002" +
    "\000\006\005\uffe9\015\015\001\002\000\004\005\ufff6\001" +
    "\002\000\010\025\012\026\011\031\010\001\002\000\004" +
    "\005\uffea\001\002\000\004\024\020\001\002\000\004\025" +
    "\ufffc\001\002\000\004\025\022\001\002\000\026\005\ufffb" +
    "\006\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\030\ufffb\001\002\000\004\025\024\001\002" +
    "\000\004\031\ufff9\001\002\000\004\031\026\001\002\000" +
    "\026\005\ufff8\006\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\030\ufff8\001\002\000\006\006" +
    "\044\016\073\001\002\000\010\025\ufff5\027\ufff3\031\ufff5" +
    "\001\002\000\004\027\040\001\002\000\006\025\012\031" +
    "\010\001\002\000\012\006\uffec\015\035\016\uffec\030\uffec" +
    "\001\002\000\010\006\ufff4\016\ufff4\030\ufff4\001\002\000" +
    "\006\025\012\031\010\001\002\000\010\006\uffed\016\uffed" +
    "\030\uffed\001\002\000\010\006\ufff2\016\ufff2\030\ufff2\001" +
    "\002\000\004\004\006\001\002\000\004\005\030\001\002" +
    "\000\006\006\044\030\043\001\002\000\010\006\ufff0\016" +
    "\ufff0\030\ufff0\001\002\000\006\025\uffef\031\uffef\001\002" +
    "\000\004\030\046\001\002\000\010\006\ufff1\016\ufff1\030" +
    "\ufff1\001\002\000\006\025\012\031\010\001\002\000\006" +
    "\016\uffee\030\uffee\001\002\000\010\017\061\020\063\021" +
    "\062\001\002\000\012\016\uffde\022\053\023\054\030\uffde" +
    "\001\002\000\006\025\uffe2\031\uffe2\001\002\000\006\025" +
    "\uffe0\031\uffe0\001\002\000\006\025\012\031\010\001\002" +
    "\000\006\016\uffdf\030\uffdf\001\002\000\006\025\012\031" +
    "\010\001\002\000\006\016\uffe1\030\uffe1\001\002\000\006" +
    "\025\uffe8\031\uffe8\001\002\000\006\025\uffe4\031\uffe4\001" +
    "\002\000\006\025\uffe6\031\uffe6\001\002\000\006\025\012" +
    "\031\010\001\002\000\012\016\uffe5\022\uffe5\023\uffe5\030" +
    "\uffe5\001\002\000\006\025\012\031\010\001\002\000\012" +
    "\016\uffe3\022\uffe3\023\uffe3\030\uffe3\001\002\000\006\025" +
    "\012\031\010\001\002\000\012\016\uffe7\022\uffe7\023\uffe7" +
    "\030\uffe7\001\002\000\004\016\074\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\026\001\001\000\004\020\006\001\001" +
    "\000\006\007\013\012\012\001\001\000\004\016\022\001" +
    "\001\000\002\001\001\000\004\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\015\012\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\071\001\001\000\006\021\031\022" +
    "\030\001\001\000\004\013\036\001\001\000\006\010\033" +
    "\012\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\035\012\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\040\001\001\000\004\004\041\001" +
    "\001\000\004\005\044\001\001\000\002\001\001\000\004" +
    "\023\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\051\011\047\012\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\056\001" +
    "\001\000\004\030\054\001\001\000\010\006\051\011\055" +
    "\012\050\001\001\000\002\001\001\000\010\006\051\011" +
    "\057\012\050\001\001\000\002\001\001\000\004\024\067" +
    "\001\001\000\004\026\065\001\001\000\004\025\063\001" +
    "\001\000\004\012\064\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\002\001\001\000\004\012\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaCUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaCUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaCUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaCUPParser$actions {
  private final JavaCUPParser parser;

  /** Constructor */
  CUP$JavaCUPParser$actions(JavaCUPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaCUPParser$do_action_part00000000(
    int                        CUP$JavaCUPParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCUPParser$parser,
    java.util.Stack            CUP$JavaCUPParser$stack,
    int                        CUP$JavaCUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaCUPParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaCUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SENTENCE ::= WHATPAR FROMPAR WHEREPAR SEMI 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("SENTENCE",0, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SENTENCE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaCUPParser$parser.done_parsing();
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCE ::= WHATPAR FROMPAR SEMI 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("SENTENCE",0, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OBJECT ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.peek()).value;
		 System.out.println("\t" + s); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("OBJECT",8, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.peek()).value;
 System.out.println("\t" + s1); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)).value;
 System.out.println("\t\t" +"DOT"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OBJECT ::= STRING NT$0 DOT NT$1 STRING 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.peek()).value;
		 System.out.println("\t" + s2); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("OBJECT",8, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.print("\t" + "\""); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$2",12, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.peek()).value;
 System.out.print(s); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$3",13, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OBJECT ::= QUOTATION NT$2 STRING NT$3 QUOTATION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)).value;
		 System.out.println( "\""); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("OBJECT",8, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Select"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$4",14, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // WHATPAR ::= SELECT NT$4 ROWLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("WHATPAR",1, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("From"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$5",15, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FROMPAR ::= FROM NT$5 TABLELIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("FROMPAR",2, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("From"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$6",16, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FROMPAR ::= FROM NT$6 SUBSEELECT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;
		 System.out.println("\t"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("FROMPAR",2, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBSEELECT ::= LPAREN WHATPAR FROMPAR WHEREPAR RPAREN 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("SUBSEELECT",9, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBSEELECT ::= LPAREN WHATPAR FROMPAR RPAREN 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("SUBSEELECT",9, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("Where"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$7",17, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHEREPAR ::= WHERE NT$7 CONTDITIONLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("WHEREPAR",3, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TABLELIST ::= OBJECT COMMA TABLELIST 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("TABLELIST",6, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TABLELIST ::= OBJECT 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("TABLELIST",6, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ROWLIST ::= ALL 
            {
              Object RESULT =null;
		 System.out.println("\t" + "*"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("ROWLIST",5, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ROWLIST ::= OBJECT COMMA ROWLIST 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("ROWLIST",5, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ROWLIST ::= OBJECT 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("ROWLIST",5, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("\t\t"  + " = " ); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$8",18, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTDITION ::= OBJECT EQUAL NT$8 OBJECT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("CONTDITION",4, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$9 ::= 
            {
              Object RESULT =null;
 System.out.println("\t\t" +" > "); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$9",19, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTDITION ::= OBJECT BIGGER NT$9 OBJECT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("CONTDITION",4, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("\t\t"  + " < "); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$10",20, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTDITION ::= OBJECT SMALLER NT$10 OBJECT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("CONTDITION",4, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.println("\tAnd"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$11",21, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTDITIONLIST ::= CONTDITION AND NT$11 CONTDITIONLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("CONTDITIONLIST",7, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$12 ::= 
            {
              Object RESULT =null;
 System.out.println("\tOr"); 
              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("NT$12",22, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTDITIONLIST ::= CONTDITION OR NT$12 CONTDITIONLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-1)).value;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("CONTDITIONLIST",7, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.elementAt(CUP$JavaCUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTDITIONLIST ::= CONTDITION 
            {
              Object RESULT =null;

              CUP$JavaCUPParser$result = parser.getSymbolFactory().newSymbol("CONTDITIONLIST",7, ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCUPParser$stack.peek()), RESULT);
            }
          return CUP$JavaCUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaCUPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaCUPParser$do_action(
    int                        CUP$JavaCUPParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCUPParser$parser,
    java.util.Stack            CUP$JavaCUPParser$stack,
    int                        CUP$JavaCUPParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaCUPParser$do_action_part00000000(
                               CUP$JavaCUPParser$act_num,
                               CUP$JavaCUPParser$parser,
                               CUP$JavaCUPParser$stack,
                               CUP$JavaCUPParser$top);
    }
}

}
